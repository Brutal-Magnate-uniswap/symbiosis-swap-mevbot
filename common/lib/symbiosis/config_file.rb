require 'digest/md5'
require 'erb'
require 'tempfile'
require 'symbiosis/domain'

#
# This class is used to make configuration files easier to handle.
#
# The idea is that we write an MD5 sum to the file in a parseable way, and then
# check that to see if it has changed, or not.
#
module Symbiosis

  class ConfigFile

    attr_reader :comment_char, :filename, :template, :domain

    def initialize(filename, comment_char="#")
      @filename = filename
      @comment_char = comment_char
      @contents = nil
      @template = nil
      @domain = nil
    end

    #
    # Set the domain -- potentially used in tests later, or in the template.
    #
    def domain=(d)
      raise "The domain must be a Symbiosis::Domain not a #{d.class}" unless d.is_a?(Symbiosis::Domain)
      @domain = d
    end

    #
    # Set the template filename
    #
    def template=(f)
      raise Errno::ENOENT,f unless File.exists?(f)

      @template = f
    end

    #
    # Template the configuration
    #
    def generate_config( templ = self.template )
      #
      # Read the template file.
      #
      content = File.open( templ, "r" ).read()

      #
      # Create a template object, and add a newline for good measure.
      #
      config = ERB.new( content ).result( binding ) + "\n"

      #
      # Return our template + MD5.
      #
      return config + [comment_char,"Checksum MD5",Digest::MD5.new.hexdigest(config)].join(" ")
    end

    #
    # Write the configuration
    #
    def write(config = self.generate_config)
      File.open(self.filename,"w+") do |fn|
        fn.write(config)
      end

      self.filename
    end


    #
    # See if the generated config is OK
    #
    def ok?
      true
    end

   # alias ok? test

    #
    # Does the configuration need updating
    #
    def outdated?
      false
    end

    #
    # Test to see if the config file exists
    #
    def exists?
      File.exists?(filename)
    end

    #
    # This tests to see if the configuration has been altered.
    #
    def changed?
      #
      # Read the snippet
      #
      snippet = File.readlines(self.filename)
      
      #
      # We expect the checksum to be the last line of the file
      #
      if snippet.last.chomp =~ /^#{comment_char} Checksum MD5 ([a-f0-9]{32,32})$/
        #
        # OK we've found the checksum
        #

        supposed_checksum = $1

        #
        # Pop off the last line, as this isn't part of the checksum
        #
        snippet.pop
        
        #
        # And compare to the calculated checksum of the rest of the snippet
        #
        return Digest::MD5.new.hexdigest(snippet.join) != supposed_checksum
      
      #
      # We're OK if the file has a big warning in it.
      #
      elsif snippet.any?{|l| comment_char+" DO NOT EDIT THIS FILE - CHANGES WILL BE OVERWRITTEN" == l.chomp}
        #
        # So return true
        #
        return false

      end

      #
      # Assume the file has been edited.  
      #
      puts "\tCould not find checksum or big warning." if $VERBOSE

      true
    end

  end

end

