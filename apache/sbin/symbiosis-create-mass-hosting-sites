#!/usr/bin/ruby
#
# NAME
#
#  symbiosis-create-mass-hosting-sites -- Auto-configure Apache2 mass-hosted sites for Symbiosis
#
# OPTIONS
#
#
# --ssl-template, -s <file>      Specify the template file for SSL sites.
#                                Defaults to
#                                /etc/symbiosis/apache.d/zz-mass-hosting.ssl.template.erb
#
# --non-ssl-template, -t <file>  Specify the template file for non-SSL sites.
#                                Defaults to
#                                /etc/symbiosis/apache.d/zz-mass-hosting.template.erb
#
# --apache2-dir, -a <directory>  Specify the location of the apache2
#                                configuration directory. Defaults to
#                                /etc/apache2.
#
# --force, -f       Force the re-creation of all sites.
#
# --no-restart, -r  Do not restart apache2 even if changes have taken place.
#
# --help, -h        Show the help information for this script.
#
# --verbose, -v     Show debugging information.
#
# USAGE
#
# This script generates two snippets of Apache configuration for use on the
# primary IP addresses of a machine.
#
# Having done so it restarts apache2.
#
# AUTHOR
#
#   Patrick J Cherry <patrick@bytemark.co.uk>
#


require 'getoptlong'

#
#  Entry point to the code
#
$FORCE    = false
$HELP     = false
$VERBOSE  = false

#
#  Do we need to restart apache?
#
$RESTART=false

#
# The root directory -- '/' by default.
#
root = "/"
non_ssl_template = nil 
ssl_template     = nil 
apache2_dir      = nil
no_restart       = false

opts = GetoptLong.new(
         [ '--help',             '-h', GetoptLong::NO_ARGUMENT ],
         [ '--verbose',          '-v', GetoptLong::NO_ARGUMENT ],
         [ '--force',            '-f', GetoptLong::NO_ARGUMENT ],
         [ '--no-restart',       '-n', GetoptLong::NO_ARGUMENT],
         [ '--ssl-template',     '-s', GetoptLong::REQUIRED_ARGUMENT ],
         [ '--non-ssl-template', '-t', GetoptLong::REQUIRED_ARGUMENT ],
         [ '--apache2-dir',      '-a', GetoptLong::REQUIRED_ARGUMENT ],
         [ '--root-dir',         '-r', GetoptLong::REQUIRED_ARGUMENT ]
       )

opts.each do |opt, arg|
  case opt
  when '--help'
    $HELP = true
  when '--verbose'
    $VERBOSE = true
  when '--template'
    ssl_template = arg
  when '--ssl-template'
    ssl_template = arg
  when '--non-ssl-template'
    non_ssl_template = arg
  when '--apache2-dir'
    apache2_dir = arg
  when '--root'
    root = arg
  when '--no-restart'
    no_restart = true
  when '--force'
    $FORCE = true
  end
end

#
# CAUTION! Here be quality kode.
#
if $HELP
  # Open the file, stripping the shebang line
  lines = File.open(__FILE__){|fh| fh.readlines}[2..-1]

  lines.each do |line|
    line.chomp!
    break if line.empty?
    puts line[2..-1].to_s
  end

  exit 0
end

def verbose(s)
  puts s if $VERBOSE
end

#
# Requirements after the help clause has finished.
#
require 'erb'
require 'symbiosis/domains'
require 'symbiosis/domain/ssl'
require 'symbiosis/config_files/apache_mass_hosting'

#
# Set the default paths.
#
non_ssl_template = File.join(root, "/etc/symbiosis/apache.d/zz-mass-hosting.template.erb") if non_ssl_template.nil?
ssl_template     = File.join(root, "/etc/symbiosis/apache.d/zz-mass-hosting.ssl.template.erb") if ssl_template.nil?
apache2_dir      = File.join(root, "/etc/apache2") if apache2_dir.nil?

#
# Any arguments on the command line specify which domains to do.
#
domains_to_configure = ARGV

primary_ips = [Symbiosis::Host.primary_ipv4, Symbiosis::Host.primary_ipv6]

#
#  For each domain.
#

[non_ssl_template, ssl_template].each do |tmpl|
  begin
    tmpl_basename        = File.basename(tmpl, ".template.erb")
    sites_available_file = File.join(apache2_dir, "sites-available","#{tmpl_basename}")
    sites_enabled_file   = File.join(apache2_dir, "sites-enabled","#{tmpl_basename}")

    config          = Symbiosis::ConfigFiles::ApacheMassHosting.new(sites_available_file, "#")
    config.template = tmpl

    #
    #  If there is already a site enabled we only
    # need to touch it if one of the SSL-files is more
    # recent than the generated file.
    #
    #  e.g. User adds /config/ssl.combined and a site
    # is generated but broken because a mandatory bundle is missing.
    #

    if ( $FORCE )
      verbose "\tForcing re-creation of configuration due to --force."

    elsif config.exists?

      if config.changed?
        verbose "\tNot updating configuration, as it has been edited by hand."
        next

      elsif config.outdated?
        verbose "\tRe-creating configuration as it is out of date."

      else
        verbose "\tSite already present and up-to date."
        next

      end

    else
      verbose "\tConfiguring site for the first time"

    end

    #
    # This gets apache2 to check the configuration using a temporary file.
    #
    if config.ok?

      verbose "\tWriting configuration"
      config.write
        
      # Definitely restart if we've rewritten the config.
      $RESTART = true

      unless config.enabled?(sites_enabled_file)
        verbose "\tEnabling site"
        config.enable(sites_enabled_file, $FORCE)
      end

    else
      verbose "\tApache has rejected the new configuration -- no changes have been made."
    end

    #
    # Rescue errors for this domain, but continue for others.
    #
  rescue StandardError => err
    warn "\tUnable to configure site for #{tmpl} because #{err.to_s}"
    verbose "\t"+err.backtrace.join("\n\t")
  end
end

#
#  All done.
#
if ( $RESTART and not no_restart )
  verbose "Restarting Apache"
  system( "/etc/init.d/apache2 restart" )
end

