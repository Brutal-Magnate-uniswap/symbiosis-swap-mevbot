#!/usr/bin/ruby1.8
#
# NAME
#   symbiosis-make-logs - Generate statistics for domains.
#
#
# SYNOPSIS
#  symbiosis-make-logs [ -h | --help ] [-m | --manual]
#       [ -v | --verbose ]
#
#
# OPTIONS
#  -h, --help              Show a help message, and exit.
#
#  -m, --manual            Show this manual, and exit.
#
#  -v, --verbose           Show verbose errors
#
#
# USAGE
#
# This script is designed to be invoked once per day and update the
# web-visible access statistics for each hosted Symbiosis domain.
#
# The script is assumed to be invoked once per day, via /etc/cron.daily/.
#
#
# SEE ALSO
#
#
# AUTHOR
#
#   Steve Kemp <steve@bytemark.co.uk>
#


#
# Standard ruby
#
require 'getoptlong'

#
# Symbiosis libraries
#
require 'symbiosis/domains'



#
#  The options set by the command line.
#
help         = false
manual       = false
$VERBOSE     = false


opts = GetoptLong.new(
                      [ '--help',       '-h', GetoptLong::NO_ARGUMENT ],
                      [ '--manual',     '-m', GetoptLong::NO_ARGUMENT ],
                      [ '--verbose',    '-v', GetoptLong::NO_ARGUMENT ]
                      )


begin
  opts.each do |opt,arg|
    case opt
    when '--help'
      help = true
    when '--manual'
      manual = true
    when '--verbose'
      $VERBOSE = true
    end
  end
rescue
  # any errors, show the help
  help = true
end


#
# CAUTION! Here be quality kode.
#
if manual or help

  # Open the file, stripping the shebang line
  lines = File.open(__FILE__){|fh| fh.readlines}[1..-1]

  found_synopsis = false

  lines.each do |line|

    line.chomp!
    break if line.empty?

    if help and !found_synopsis
      found_synopsis = (line =~ /^#\s+SYNOPSIS\s*$/)
      next
    end

    puts line[2..-1].to_s

    break if help and found_synopsis and line =~ /^#\s*$/

  end

  exit 0
end



#
#  Potentially we process each domain.
#
Symbiosis::Domains.each do |domain|

  puts "Considering domain: #{domain}" if ( $VERBOSE )

  #
  # Are statistics disabled for this domain?
  #
  disable = File.join( domain.config_dir, "no-stats" )

  if (File.exists?( disable ) )
    puts "\tSkipping due to existance of #{disable}" if ( $VERBOSE )
    next
  end

  #
  # OK we're going to proceed.
  #
  puts "\tProcessing #{domain}"

  #
  # OK now we need to look for a logfile, or two.
  #
  #  access.log     for HTTP accesses.
  #  access.ssl.log for HTTPS accesses.
  #
  process = Array.new()

  process.push( File.join( domain.log_dir, "access.log.1" ) ) if
    File.exists?( File.join( domain.log_dir, "access.log.1" ) )
  process.push( File.join( domain.log_dir, "access.ssl.log.1" ) ) if
    File.exists?( File.join( domain.log_dir, "access.ssl.log.1" ) )

  #
  # If we have less than one logfile to process we are done.
  #
  if ( process.size < 1 )
    puts "\tSkipping this domain, no suitable logfiles found" if ( $VERBOSE )
    next
  end


  #
  # Show the files we're going to process.
  #
  puts "\tTo process #{process.join( "," )}" if ( $VERBOSE )


  #
  #  Now process them.
  #
  process.each do |file|

    # TODO
  end

end



