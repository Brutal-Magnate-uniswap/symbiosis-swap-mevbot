#!/usr/bin/ruby1.8
#
# NAME
#   symbiosis-make-logs - Generate statistics for domains.
#
#
# SYNOPSIS
#  symbiosis-make-logs [ -h | --help ] [-m | --manual]
#       [ -v | --verbose ]
#
#
# OPTIONS
#  -h, --help              Show a help message, and exit.
#
#  -m, --manual            Show this manual, and exit.
#
#  -v, --verbose           Show verbose errors
#
#
# USAGE
#
# This script is designed to be invoked once per day and update the
# web-visible access statistics for each hosted Symbiosis domain.
#
# The script is assumed to be invoked once per day, via /etc/cron.daily/.
#
#
# SEE ALSO
#
#
# AUTHOR
#
#   Steve Kemp <steve@bytemark.co.uk>
#


#
# Standard ruby
#
require 'getoptlong'



#
#  The options set by the command line.
#
help         = false
manual       = false
$VERBOSE     = false


opts = GetoptLong.new(
                      [ '--help',       '-h', GetoptLong::NO_ARGUMENT ],
                      [ '--manual',     '-m', GetoptLong::NO_ARGUMENT ],
                      [ '--verbose',    '-v', GetoptLong::NO_ARGUMENT ]
                      )


begin
  opts.each do |opt,arg|
    case opt
    when '--help'
      help = true
    when '--manual'
      manual = true
    when '--verbose'
      $VERBOSE = true
    end
  end
rescue
  # any errors, show the help
  help = true
end


#
# CAUTION! Here be quality kode.
#
if manual or help

  # Open the file, stripping the shebang line
  lines = File.open(__FILE__){|fh| fh.readlines}[1..-1]

  found_synopsis = false

  lines.each do |line|

    line.chomp!
    break if line.empty?

    if help and !found_synopsis
      found_synopsis = (line =~ /^#\s+SYNOPSIS\s*$/)
      next
    end

    puts line[2..-1].to_s

    break if help and found_synopsis and line =~ /^#\s*$/

  end

  exit 0
end

#
# Symbiosis libraries -- required here so they're not needed during the build
# process for manpage generation.
#
require 'symbiosis/domains'
require 'symbiosis/domain/http'

#
#  Potentially we process each domain.
#
Symbiosis::Domains.each do |domain|
  puts "Considering domain: #{domain}" if ( $VERBOSE )

  #
  # Are statistics disabled for this domain?
  #
  unless ( domain.should_have_stats? )
    puts "\tSkipping as stats have been disabled." if ( $VERBOSE )
    next
  end

  #
  # OK now we need to look for a logfile, or two.
  #
  #  access.log     for HTTP accesses.
  #  ssl_access.log for HTTPS accesses.
  #
  process = Array.new()

  %w( access.log.1 ssl_access.log.1 ).each do |name|
    log = File.join( domain.log_dir, name ) 
    process.push(log) if File.exists?(log) 
  end


  #
  # If we didn't find a logfile we're done.
  #
  if ( process.empty? )
    puts "\tSkipping this domain, no suitable logfiles found" if ( $VERBOSE )
    next
  end


  #
  #  Create a configuration file, if one wasn't found.
  #
  webalizer_conf = File.join( domain.log_dir, "webalizer.conf" )

  config        = Symbiosis::ConfigFiles::Webalizer.new(webalizer_conf, "#")
  config.domain = domain

  write_config = false

  #
  # This is taken from symbiosis-create-stes
  #
  if ( $FORCE )
    verbose "\tForcing re-creation of configuration due to --force."
    write_config = true

  elsif config.exists?

    if config.changed?
      verbose "\tNot updating configuration, as it has been edited by hand."
      write_config = false

    elsif config.outdated?
      verbose "\tRe-creating configuration as it is out of date."
      write_config = true

    else
      verbose "\tConfiguring already present and up-to date."
      write_config = false

    end

  else
    verbose "\tConfiguring site for the first time"
    write_config = true

  end

  #
  # Write the config if we need to.
  #
  config.write if write_config


  #
  #  If we don't have a statistics directory then we need to create it,
  # and we need to create it with the domains' UID/GID
  #
  output =  "/srv/#{domain}/public/htdocs/stats/"
  domain.create_dir( output ) if( !File.directory?( output ) )


  #
  #  Now process each logfile.
  #
  process.each do |file|
    puts "\tRunning webalizer against #{file}" if $VERBOSE

    #
    #  Now run it
    #
    system( "cd #{domain.log_dir} && sudo -u #{domain.uid} -g #{domain.gid} -- webalizer -q #{file} >/dev/null 2>/dev/null" )
  end

end



