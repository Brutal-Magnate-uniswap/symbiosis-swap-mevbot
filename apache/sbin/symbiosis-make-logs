#!/usr/bin/ruby1.8
#
# NAME
#   symbiosis-make-logs - Generate statistics for domains.
#
#
# SYNOPSIS
#  symbiosis-make-logs [ -h | --help ] [-m | --manual]
#       [ -v | --verbose ]
#
#
# OPTIONS
#  -h, --help              Show a help message, and exit.
#
#  -m, --manual            Show this manual, and exit.
#
#  -v, --verbose           Show verbose errors
#
#
# USAGE
#
# This script is designed to be invoked once per day and update the
# web-visible access statistics for each hosted Symbiosis domain.
#
# The script is assumed to be invoked once per day, via /etc/cron.daily/.
#
#
# SEE ALSO
#
#
# AUTHOR
#
#   Steve Kemp <steve@bytemark.co.uk>
#


#
# Standard ruby
#
require 'getoptlong'

#
# Symbiosis libraries
#
require 'symbiosis/domains'




#
#  The options set by the command line.
#
help         = false
manual       = false
$VERBOSE     = false


opts = GetoptLong.new(
                      [ '--help',       '-h', GetoptLong::NO_ARGUMENT ],
                      [ '--manual',     '-m', GetoptLong::NO_ARGUMENT ],
                      [ '--verbose',    '-v', GetoptLong::NO_ARGUMENT ]
                      )


begin
  opts.each do |opt,arg|
    case opt
    when '--help'
      help = true
    when '--manual'
      manual = true
    when '--verbose'
      $VERBOSE = true
    end
  end
rescue
  # any errors, show the help
  help = true
end


#
# CAUTION! Here be quality kode.
#
if manual or help

  # Open the file, stripping the shebang line
  lines = File.open(__FILE__){|fh| fh.readlines}[1..-1]

  found_synopsis = false

  lines.each do |line|

    line.chomp!
    break if line.empty?

    if help and !found_synopsis
      found_synopsis = (line =~ /^#\s+SYNOPSIS\s*$/)
      next
    end

    puts line[2..-1].to_s

    break if help and found_synopsis and line =~ /^#\s*$/

  end

  exit 0
end



#
#  Potentially we process each domain.
#
Symbiosis::Domains.each do |domain|
  puts "Considering domain: #{domain}" if ( $VERBOSE )


  #
  # Are statistics disabled for this domain?
  #
  disable = File.join( domain.config_dir, "no-stats" )
  if (File.exists?( disable ) )
    puts "\tSkipping due to existance of #{disable}" if ( $VERBOSE )
    next
  end


  #
  # OK now we need to look for a logfile, or two.
  #
  #  access.log     for HTTP accesses.
  #  access.ssl.log for HTTPS accesses.
  #
  process = Array.new()

  %w( access.log.1 access.ssl.log.1 ).each do |name|
    process.push( File.join( domain.log_dir, name ) ) if
      File.exists?( File.join( domain.log_dir, name ) )
  end


  #
  # If we didn't find a logfile we're done.
  #
  if ( process.empty? )
    puts "\tSkipping this domain, no suitable logfiles found" if ( $VERBOSE )
    next
  end


  #
  #  Create a configuration file, if one wasn't found.
  #
  if ( !File.exists?( File.join( domain.log_dir, "webalizer.conf" ) ) )

    puts "\tCreating webalizer configuration file" if $VERBOSE

    File.open( File.join( domain.log_dir, "webalizer.conf" ), "w" ) do |f|
      f.write <<"EOF"

OutputDir       /srv/#{domain}/public/htdocs/stats/
Incremental     yes
ReportTitle     Usage Statistics for
HostName        #{domain}
HideSite        #{domain}
HideReferrer    #{domain}/
HideReferrer    Direct Request
HideURL         *.gif
HideURL         *.GIF
HideURL         *.jpg
HideURL         *.JPG
HideURL         *.ra
GroupURL        /cgi-bin/*
MangleAgents    4
EOF
    end
  end



  #
  #  If we don't have a statistics directory then we need to create it,
  # and we need to create it with the domains' UID/GID
  #
  output =  "/srv/#{domain}/public/htdocs/stats/"
  if( !File.directory?( output ) )
    domain.create_dir( output )
  end


  #
  #  Now process each logfile.
  #
  process.each do |file|
    puts "\tRunning webalizer against #{file}" if $VERBOSE

    #
    #  Now run it
    #
    system( "cd #{domain.log_dir} && webalizer -q #{file} >/dev/null 2>/dev/null" )
  end

  #
  #  Fixup the permissions on /htdocs/stats, recursively, to match the
  # owner.
  #
  # TODO
  #
end



