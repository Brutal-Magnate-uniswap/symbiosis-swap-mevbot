#!/usr/bin/ruby1.8
#
# NAME
#   symbiosis-rotate-logs - Rotate and prune Apache logs.
#
#
# SYNOPSIS
#  symbiosis-rotate-logs [ -h | --help ] [-m | --manual] [ -v | --verbose ]
#
#
# OPTIONS
#
#  -h, --help              Show a help message, and exit.
#
#  -m, --manual            Show this manual, and exit.
#
#  -v, --verbose           Show verbose errors
#
#
# USAGE
#
# This script is designed to be invoked once per day and rotate the current
# apache logfile beneath each domains public directory.
#
# Logs older than 14 days will also be pruned.
#
# AUTHOR
#
#   Steve Kemp <steve@bytemark.co.uk>
#


#
# Standard ruby
#
require 'getoptlong'



#
#  The options set by the command line.
#
help         = false
manual       = false
$VERBOSE     = false
$FORCE       = false


opts = GetoptLong.new(
                      [ '--help',       '-h', GetoptLong::NO_ARGUMENT ],
                      [ '--manual',     '-m', GetoptLong::NO_ARGUMENT ],
                      [ '--verbose',    '-v', GetoptLong::NO_ARGUMENT ]
                      )


begin
  opts.each do |opt,arg|
    case opt
    when '--help'
      help = true
    when '--manual'
      manual = true
    when '--verbose'
      $VERBOSE = true
    end
  end
rescue
  # any errors, show the help
  help = true
end


#
# CAUTION! Here be quality kode.
#
if manual or help

  # Open the file, stripping the shebang line
  lines = File.open(__FILE__){|fh| fh.readlines}[1..-1]

  found_synopsis = false

  lines.each do |line|

    line.chomp!
    break if line.empty?

    if help and !found_synopsis
      found_synopsis = (line =~ /^#\s+SYNOPSIS\s*$/)
      next
    end

    puts line[2..-1].to_s

    break if help and found_synopsis and line =~ /^#\s*$/

  end

  exit 0
end

#
# Symbiosis libraries -- required here so they're not needed during the build
# process for manpage generation.
#
require 'symbiosis/domains'
require 'symbiosis/domain/http'



def verbose(s) ; puts s if $VERBOSE ; end


#
#  Potentially we process each domain.
#
Symbiosis::Domains.each do |domain|
  verbose "Considering domain: #{domain}"

  #
  # Skip symlinks
  #
  if ( domain.is_alias? )
    verbose "\tSkipping as it is an symlink to #{domain.directory}."
    next
  end

  #
  # OK now we need to look for a logfile, or two.
  #
  # We will find files of the form:
  #
  #  access.log
  #  access.log.0
  #  access.log.1
  #
  # We want to increment the version of each file.  We do that by
  # sorting asci-betically
  #
  results = Array.new()

  Dir.foreach( File.join( domain.directory, "public/logs" ) ) do |entry|

    # skip dotfiles
    next if entry == '.' or entry == '..'

    # skip files that don't match access-ssl
    next if ( entry !~ /^(access|ssl_access)/ )

    # save the file
    results.push( entry )
  end

  #
  # If we didn't find any logfiles we're done.
  #
  if ( results.empty? )
    verbose "\tSkipping this domain, no suitable logfiles found"
    next
  end

  #
  #  OK sort the array by the trailng digit to give us:
  #
  #  access.log.1
  #  ...
  #  access.log.10
  #  access.log.11
  #  ..
  #
  a = results.sort_by do |x|
    x.split(".").map {|i| i.to_i}
  end


  #
  #  Process these files backward so we don't over-write anything.
  #
  a.reverse.each do |file|

    dest = file

    if ( dest =~ /^(.*?)([0-9]*)$/ )
      before = $1.dup
      num    = $2.dup

      dest = "#{before}#{num.to_i+1}"

      if ( num.to_i > 14 )
        puts "rm #{file}"
      else
        puts "mv #{file} #{dest}"
      end
    else
        puts "mv #{file} #{file}.0"
    end
  end

end



