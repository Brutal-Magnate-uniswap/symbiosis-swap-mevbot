#! /usr/bin/ruby1.8
#
# NAME
#   symbiosis-firewall-blacklist -- Automatically blacklist IP addresses.
#
# SYNOPSIS
#  symbiosis-firewall-blacklist [ -h | --help ] [-m | --manual]
#       [ -v | --verbose ] [ -x | --no-exec] [ -d | --no-delete ]
#       [ -a | --attempts <n> ] [ -e | --expire-after <n> ]
#       [ -p | --prefix <dir> ] [ -t | --template-d <dir> ] 
#
# OPTIONS
#  -h, --help              Show a help message, and exit.
#
#  -m, --manual            Show this manual, and exit.
#
#  -v, --verbose           Show verbose errors
#
#  -x, --no-exec           Do not execute the generated firewall rules
#
#  -d, --no-delete         Do not delete the generated script
#
#  -a, --attempts <n>      Number of attempts before an IP address is
#                          blacklisted. Defaults to 20.
#
#  -e, --expire-after <n>  Number of days after which blacklisted IPs should be
#                          expired. Defaults to 2.
#
#  -p, --prefix <dir>      Directory where action.d, incoming.d, outgoing.d etc
#                          are located. Defaults to /etc/symbiosis/firewall.
#
#  -t, --template-d <dir>  Additional directory to search for templates.
#
# USAGE
#
# This script is designed to automatically blacklist IP addresses which
# have been used to brute force various services running on the machine.
#
# It uses a set of definitions found in $PREFIX/pattern.d/ to match IP
# addresses in log files, and then adds the offending IPs to the blacklist by
# adding files to the directory $PREFIX/blacklist.d.
#
# Each addition is one of the two forms:
#
#   1.2.3.4.auto                The IPv4 address 1.2.3.4
#   2001:123:456:789::-64.auto  The IPv6 range 2001:123:456:789::/64
# 
# It should be noted that IPv6 addresses will be added as entire /64s.
#
# Each file will contain a list of ports, one per line, or simply "all" to
# blacklist all ports.
#
# Once that directory has been written, symbiosis-firewall(1) is called with
# the reload-blacklist action.
#
# Most of the flags above are passed straigh on to symbiosis-firewall(1).
#
# SEE ALSO
#
# symbiosis-firewall(1), symbiosis-firewall-whitelist(1)
#
# AUTHOR
#
#   Steve Kemp <steve@bytemark.co.uk>
#

# TODO: fix manpage (above)

require 'getoptlong'
require 'tempfile'
require 'symbiosis/firewall/blacklist'
require 'symbiosis/firewall/directory'
require 'symbiosis/firewall/template'
require 'symbiosis/firewall/ipaddr'
require 'symbiosis/firewall/logtail'
require 'symbiosis/firewall/pattern'

#
#  The options set by the command line.
#
help         = false
manual       = false
$VERBOSE     = false
base_dir     = "/etc/symbiosis/firewall/"
delete       = false
execute      = false
template_dir = nil
force        = true
attempts     = 20
expire_after = 2

opts = GetoptLong.new(
         [ '--help',       '-h', GetoptLong::NO_ARGUMENT ],
         [ '--manual',     '-m', GetoptLong::NO_ARGUMENT ],
         [ '--verbose',    '-v', GetoptLong::NO_ARGUMENT ],
         [ '--no-execute', '-x', GetoptLong::NO_ARGUMENT ],
         [ '--no-delete',  '-d', GetoptLong::NO_ARGUMENT ],
         [ '--force',      '-f', GetoptLong::NO_ARGUMENT ],
         [ '--prefix',     '-p', GetoptLong::REQUIRED_ARGUMENT ],
         [ '--template-d', '-t', GetoptLong::REQUIRED_ARGUMENT ],
         [ '--attempts',   '-a', GetoptLong::REQUIRED_ARGUMENT ],
         [ '--expire-after', '-e', GetoptLong::REQUIRED_ARGUMENT ]
       )

opts.each do |opt,arg|
  case opt
  when '--help'
    help = true
  when '--manual'
    manual = true
  when '--verbose'
    $VERBOSE = true
  when '--test'
    test = true
  when '--no-execute'
    execute = false
  when '--no-delete'
    delete = false
  when '--force'
    force = false
  when '--prefix'
    base_dir     = File.expand_path(arg)
  when '--template-d'
    template_dir = File.expand_path(arg)
  when '--expire-after'
    expire_after = arg.to_i
  when '--attempts'
    attempts = arg.to_i
  end
end

#
# CAUTION! Here be quality kode.
#
if manual or help
  # Open the file, stripping the shebang line
  lines = File.open(__FILE__){|fh| fh.readlines}[1..-1]

  found_synopsis = false

  lines.each do |line|

    line.chomp!
    break if line.empty?

    if help and !found_synopsis
      found_synopsis = (line =~ /^#\s+SYNOPSIS\s*$/)
      next
    end

    puts line[2..-1].to_s

    break if help and found_synopsis and line =~ /^#\s*$/

  end

  exit 0
end

#
#  Expire old entries first of all, then add new ones.
#
puts "Expiring old blacklist entries" if ( $VERBOSE )

expired = 0
blacklist_d = File.join(base_dir, "blacklist.d")

# ensure the directory exists.
if ( ! File.directory?( "#{blacklist_d}" ) )
  system( "mkdir -p #{blacklist_d}" )
end

if ( File.directory?( blacklist_d ) )

  Dir.foreach( blacklist_d ) do |entry|
    if ( ( entry =~ /\.auto$/i ) &&
         (File.mtime( "#{blacklist_d}/#{entry}" ) <  ( Time.now - 8 * 24 * 60 * 60 ) ) )
    then
      puts "Removing #{blacklist_d}/#{entry}" if ( $VERBOSE )
      File.unlink("#{blacklist_d}/#{entry}")
      expired += 1
    end
  end

end

puts "Expiring done - removed #{expired} file(s)" if ( $VERBOSE )

#
# Fetch the IP addresses
#
blacklist = Symbiosis::Blacklist.new
blacklist.attempts = attempts
blacklist.base_dir = base_dir

whitelist = Symbiosis::IPListDirectory.new(File.join(base_dir, "whitelist.d"))


#
#  Did we update?
#
updated=false


#
#  Iterate over each IP
#
blacklist.generate.each do |ip, ports|

  puts "Found IP address: #{ip}" if ( $VERBOSE )

  fn = File.join(blacklist_d,ip.to_s.gsub("/","-")+".auto" )

  if ( File.exists?(fn) )
    puts "\tAlready blacklisted" if ( $VERBOSE )
  else
    # create the file
    system( "touch #{fn}" )

    updated=true
    puts "\tAdding to blacklist" if ( $VERBOSE )
  end
end

#
# Re-generate the blacklist chain
#
if ( updated || expired > 0 || force )
  cmd = %w(symbiosis-firewall)
  cmd << "--verbose" if $VERBOSE
  cmd << "--no-execute" unless execute
  cmd << "--no-delete"  unless delete
  cmd += ["--prefix", base_dir] 
  cmd += ["--template-d", template_dir] unless template_dir.nil?
  cmd << "reload-blacklist"
  exec(cmd)
end

