#! /usr/bin/ruby1.8
#
# NAME
#
#   symbiosis-firewall-blacklist -- Automatically blacklist IP addresses.
#
# SYNOPSIS
#
#  Options:
#
#   --prefix      The directory to operate upon.
#
#  Help Options:
#
#   --help        Show the help information for this script.
#   --verbose     Show debugging information.
#
# This script is designed to automatically blacklist IP addresses which
# have been used to successfully login via SSH.
#
# It does this by parsing the output of the "last" command, and creating
# entries in /etc/symbiosis/firewall/blacklist.d/
#
# AUTHOR
#
#   Steve Kemp <steve@bytemark.co.uk>
#

#
#  Modules we require
#

require 'getoptlong'
require 'tempfile'
require 'symbiosis/utmp'
require 'symbiosis/firewall/directory'
require 'symbiosis/firewall/template'
require 'symbiosis/firewall/ipaddr'
require 'symbiosis/firewall/logtail'
require 'symbiosis/firewall/pattern'

opts = GetoptLong.new(
    [ '--help',    '-h', GetoptLong::NO_ARGUMENT ],
    [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ],
    [ '--prefix',  '-p', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--template-d', '-t', GetoptLong::REQUIRED_ARGUMENT ]
)


#
#  The options set by the command line.
#
$HELP    = false
$VERBOSE = false
$PREFIX = "/etc/symbiosis/firewall/"
delete   = false
execute  = false
template_dir = nil
force = true

opts.each do |opt,arg|
  case opt
    when '--help'
      $HELP = true
    when '--verbose'
      $VERBOSE = true
    when '--prefix'
      $PREFIX = arg
    when '--template-d'
      template_dir = arg
  end
end


#
# CAUTION! Here be quality kode.
#
if $HELP
  # Open the file, stripping the shebang line
  lines = File.open(__FILE__){|fh| fh.readlines}[2..-1]

  lines.each do |line|
    line.chomp!
    break if line.empty?
    puts line[2..-1].to_s
  end

  exit 0
end


#
#  Expire old entries first of all, then add new ones.
#
puts "Expiring old blacklist entries" if ( $VERBOSE )

expired = 0
blacklist_d = File.join($PREFIX, "blacklist.d")

# ensure the directory exists.
if ( ! File.directory?( "#{blacklist_d}" ) )
  system( "mkdir -p #{blacklist_d}" )
end

if ( File.directory?( blacklist_d ) )

  Dir.foreach( blacklist_d ) do |entry|
    if ( ( entry =~ /\.auto$/i ) &&
         (File.mtime( "#{blacklist_d}/#{entry}" ) <  ( Time.now - 8 * 24 * 60 * 60 ) ) )
    then
      puts "Removing #{blacklist_d}/#{entry}" if ( $VERBOSE )
      File.unlink("#{blacklist_d}/#{entry}")
      expired += 1
    end
  end

end

puts "Expiring done - removed #{expired} file(s)" if ( $VERBOSE )

#
# Fetch the IP addresses
#
blacklist = Symbiosis::Blacklist.new
blacklist.attempts = attempts
blacklist.base_dir = $PREFIX

whitelist = Symbiosis::IPListDirectory.new(File.join($PREFIX, "whitelist.d"))


#
#  Did we update?
#
updated=false


#
#  Iterate over each IP
#
blacklist.generate.each do |ip, ports|

  puts "Found IP address: #{ip}" if ( $VERBOSE )

  fn = File.join(blacklist_d,ip.to_s.gsub("/","-")+".auto" )

  if ( File.exists?(fn) )
    puts "\tAlready blacklisted" if ( $VERBOSE )
  else
    # create the file
    system( "touch #{fn}" )

    updated=true
    puts "\tAdding to blacklist" if ( $VERBOSE )
  end
end



#
# Re-generate the blacklist chain
#
if ( updated || expired > 0 || force )
  system( "symbiosis-firewall reload-blacklist" )
end










