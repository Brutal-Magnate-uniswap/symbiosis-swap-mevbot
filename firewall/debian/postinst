#!/bin/bash

set -e

#
# Skip, if we are not in "configure" state
#
if [ "$1" != "configure" ]; then
        echo "I: Skipping configuration"
        exit 0
fi

#
#  The prefix of our tree.
#
PREFIX=/etc/symbiosis/firewall

#
#  The old tree.
#
OLD=/etc/firewall

#
#  If we have the old tree then move it into place.
#
if [ -d $OLD -a -d $OLD/incoming.d -a -d $OLD/outgoing.d ]; then

    #
    #  Make sure we have the new directory.
    #
    if [ ! -d $PREFIX ]; then
        mkdir -p $PREFIX
    fi

    #
    #  Remove the blacklisted IPs, they'll return
    #
    rm -rf $OLD/blacklist.d || true

    #
    #  Move each file
    #
    for i in blacklist.d/ incoming.d/ local.d/ outgoing.d/ patterns.d/ whitelist.d/ ; do

        #
        #  Make sure the dest exists.
        #
        mkdir -p $PREFIX/$i     || true

        #
        # Move any contents
        #
        if [ -d $OLD/$i ]; then
            mv $OLD/$i/* $PREFIX/$i >/dev/null 2>/dev/null || true
            rm -rf $OLD/$i          >/dev/null 2>/dev/null || true
        fi
    done

    #
    #  Disable if we should
    #
    if [ -e $OLD/disabled ]; then
        touch $PREFIX/disabled
    fi
    if [ -e $OLD/disabled.blacklist ]; then
        touch $PREFIX/disabled.blacklist
    fi

    #
    #  Remove the old tree.
    #
    rm -rf $OLD || true
fi


#
#  Otherwise we have to make a new prefix and start from scratch
#
if [ ! -d $PREFIX ]; then
    mkdir -p $PREFIX
fi


#
#  If we're disabled then disable ourself
#
if [ -e /opt/bytemark/no-firewall ]; then
    touch $PREFIX/disabled
    rm /opt/bytemark/no-firewall
fi

if [ -e /etc/firewall.exceptions ]; then
    rm -f /etc/firewall.exceptions
fi

#
#  If /opt/bytemark is present remove it
#
if [ -d /opt/bytemark ]; then
    rm -rf /opt/bytemark
fi

#
#  See if there are any incominng entries present.
#
incoming=0
for i in $PREFIX/incoming.d/*-*; do
    if [ -e $i ]; then
        incoming=1
    fi
done

#
# Create incoming/outgoing directories, and make sure that RELATED/ESTABLISED
# are unconditionally allowed.
#
for dir in incoming outgoing ; do
  if  [ ! -d $PREFIX/$dir.d/ ]; then
      mkdir -p $PREFIX/$dir.d/
      touch  $PREFIX/$dir.d/.empty
  fi

  for state in related established ; do
    touch  $PREFIX/$dir.d/00-$state
  done

  #
  # Essential IPv6 ICMP protocols
  # 
  touch $PREFIX/$dir.d/05-essential-icmpv6
done

#
# Create a few more needed directories.
#
for dir in local whitelist blacklist ; do
  if  [ ! -d $PREFIX/$dir.d/ ]; then
      mkdir -p $PREFIX/$dir.d/
      touch  $PREFIX/$dir.d/.empty
  fi
done


#
# Create some default rules.
#
if [ "$incoming" = "0" ]; then

    echo "I: Creating default rules for the incoming firewall"

    #
    #  Default incoming rules.
    #
    touch  $PREFIX/incoming.d/05-ping
    touch  $PREFIX/incoming.d/07-ssh
    touch  $PREFIX/incoming.d/10-http
    touch  $PREFIX/incoming.d/10-https
    touch  $PREFIX/incoming.d/20-ftp
    touch  $PREFIX/incoming.d/30-imap
    touch  $PREFIX/incoming.d/30-imaps
    touch  $PREFIX/incoming.d/40-pop3
    touch  $PREFIX/incoming.d/40-pop3s
    touch  $PREFIX/incoming.d/50-smtp
    touch  $PREFIX/incoming.d/50-smtps
    touch  $PREFIX/incoming.d/50-submission
    touch  $PREFIX/incoming.d/60-sieve
    touch  $PREFIX/incoming.d/99-reject

    #
    #  Default outgoing rules.
    #
    touch $PREFIX/outgoing.d/50-reject-www-data
fi

#
# Make sure an HTTPS rule exists.
#
if [ -e $PREFIX/incoming.d/*-http -a ! -e $PREFIX/incoming.d/*-https ] ; then
    touch $PREFIX/incoming.d/10-https
fi

#
# This rule forbade outgoing connections by www-data.  It has been renamed.
#
if [ -e $PREFIX/outgoing.d/50-www-data ] ; then
    mv $PREFIX/outgoing.d/50-www-data $PREFIX/outgoing.d/50-reject-www-data
fi

#
# Remove the match-not-uid-www-data rule if it exists -- left over from RC1/2.
#
if [ -e $PREFIX/outgoing.d/10-match-uid-not-www-data -a -e $PREFIX/outgoing.d/99-reject ] ; then
  mv $PREFIX/outgoing.d/10-match-uid-not-www-data $PREFIX/outgoing.d/50-reject-www-data
  rm $PREFIX/outgoing.d/99-reject
fi

#
# Chown the firewall directory.
#
chown -R admin:admin $PREFIX

#
#  Reload the firewall unless we're in a chroot.
#
if [ -z "$CHROOT" ]; then

    symbiosis-firewall load || true

else
    echo "I: In a chroot - not flushing / running firewall"
fi

#
#  Cleanup old ifup/down scripts
#
for i in www-data bytemark-firewall ; do
  if [ -e /etc/network/if-up.d/$i ]; then
      rm -f /etc/network/if-up.d/$i
  fi
  if [ -e /etc/network/if-down.d/$i ]; then
      rm -f /etc/network/if-down.d/$i
  fi
done

#
# Remove old cron test
#
if [ -e /etc/cron.hourly/firewall-test ] ; then
  rm -f /etc/cron.hourly/firewall-test
fi

#
# Remove another old cron test
#
if [ -e /etc/cron.d/firewall-blocker ] ; then
  rm -f /etc/cron.d/firewall-blocker
fi


#DEBHELPER#
exit 0
