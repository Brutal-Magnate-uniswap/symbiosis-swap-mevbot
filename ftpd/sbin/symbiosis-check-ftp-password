#!/usr/bin/ruby
#
# symbiosis-check-ftp-password
#
# http://download.pureftpd.org/pub/pure-ftpd/doc/README.Authentication-Modules
#
# Authentication programs can read the following environment variables to get
# info about the user trying to authenticate:
#
# AUTHD_ACCOUNT
# AUTHD_PASSWORD
# AUTHD_LOCAL_IP
# AUTHD_LOCAL_PORT
# AUTHD_REMOTE_IP
#
# The program must respond on the standard output with lines like:
#
# auth_ok:1
# uid:42
# gid:21
# dir:/home/j
# end
#
# Note the final 'end' keyword. It's mandatory.
#
# Here's the list of recognized tokens ('xxx' has of course to be filled):
#
# * auth_ok:xxx
# * uid:xxx
# * gid:xxx
# * dir:xxx
# * slow_tilde_expansion:xxx (optional, default is 1)
# * throttling_bandwidth_ul:xxx (optional)
# * throttling_bandwidth_dl:xxx (optional)
# * user_quota_size:xxx (optional)
# * user_quota_files:xxx (optional)
# * ratio_upload:xxx and radio_download:xxx (optional)
# * per_user_max:xxx (optional)
#
#
# To test;
#  mkdir -p /srv/example.com/config
#  echo -n "foo" > /srv/example.com/config/ftp-password
#  AUTHD_ACCOUNT="example.com" AUTHD_PASSWORD="foo" ./check-ftp-password
#
#

require 'symbiosis/domains'
require 'symbiosis/domain/ftp'
require 'syslog'

# These are error codes suitable for dovecot.  Not sure why we're using them here!
TEMPORARY_ERROR = 111
PERMANENT_ERROR = 1
SUCCESS         = 0

ip       = "unknown"
service  = "ftp";
username = nil
password = nil

ip       = ENV['AUTHD_REMOTE_IP' ] if ENV.has_key?('AUTHD_REMOTE_IP')
username = ENV['AUTHD_ACCOUNT'] if ENV.has_key?('AUTHD_ACCOUNT')
password = ENV['AUTHD_PASSWORD'] if ENV.has_key?('AUTHD_PASSWORD' )

# Open syslog
syslog = Syslog.open( File.basename($0), Syslog::LOG_NDELAY && Syslog::LOG_PERROR, Syslog::LOG_FTP )

begin
  #
  # username sanity check
  #
  if username.nil? 
    syslog.info "No username given from #{ip} for #{service} service"
    syslog.err  "#{service} login failure from IP: #{ip} username: nil"
  
    print "auth_ok:-1\nend\n"
    exit PERMANENT_ERROR
  end

  domain = Symbiosis::Domains.find(username)

  if domain.nil?
    syslog.info "Non-existent domain #{username.inspect} from #{ip} for #{service} service"
    syslog.err  "#{service} login failure from IP: #{ip} username: #{username.inspect}"

    print "auth_ok:-1\nend\n"
    exit PERMANENT_ERROR
  end

  unless domain.ftp_enabled?
    syslog.info "FTP not enabled for domain #{domain.name.inspect} from #{ip} for #{service} service"
    syslog.err  "#{service} login failure from IP: #{ip} username: #{username.inspect}"

    print "auth_ok:-1\nend\n"
    exit PERMANENT_ERROR
  end

  #
  # Try logging in.
  #
  if domain.ftp_login(password.to_s)
    puts ["auth_ok:1",
          "uid:#{domain.uid}",
          "gid:#{domain.gid}",
          "dir:#{domain.ftp_chroot_dir}",
          "end" ].join("\n")
    #
    # Woo-hoo success!
    #
    exit SUCCESS
  else
    syslog.info "Bad password for username #{username.inspect} from #{ip} for #{ftp} service"
    syslog.err  "#{service} login failure from IP: #{ip} username: #{username.inspect}"

    print "auth_ok:-1\nend\n"
    exit PERMANENT_ERROR
  end

rescue => err

  #
  # Rescue all exceptions, to make sure authentication doesn't happen
  # automatically when things fail
  #
  syslog.err "#{err} for username #{username} from #{ip} for #{service} service"
  print "auth_ok:0\nend\n"
  exit TEMPORARY_ERROR

end

# 
#  We should never get this far.
#
syslog.err "Something has gone badly wrong whilst authenticating username #{username} from #{ip} for #{service} service"
print "auth_ok:0\nend\n"
exit TEMPORARY_ERROR
