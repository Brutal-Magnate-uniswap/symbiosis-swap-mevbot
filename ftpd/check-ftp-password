#!/usr/bin/perl -w

# check-ftp-password
#
# http://download.pureftpd.org/pub/pure-ftpd/doc/README.Authentication-Modules
#
# Authentication programs can read the following environment variables to get
# info about the user trying to authenticate:
#
# AUTHD_ACCOUNT
# AUTHD_PASSWORD
# AUTHD_LOCAL_IP
# AUTHD_LOCAL_PORT
# AUTHD_REMOTE_IP
#
# The program must respond on the standard output with lines like:
#
# auth_ok:1
# uid:42
# gid:21
# dir:/home/j
# end
#
# Note the final 'end' keyword. It's mandatory.
#
# Here's the list of recognized tokens ('xxx' has of course to be filled):
#
# * auth_ok:xxx
# * uid:xxx
# * gid:xxx
# * dir:xxx
# * slow_tilde_expansion:xxx (optional, default is 1)
# * throttling_bandwidth_ul:xxx (optional)
# * throttling_bandwidth_dl:xxx (optional)
# * user_quota_size:xxx (optional)
# * user_quota_files:xxx (optional)
# * ratio_upload:xxx and radio_download:xxx (optional)
# * per_user_max:xxx (optional)
#
#
# To test;
#  mkdir -p /srv/example.com/config
#  echo -n "foo" | md5sum | awk '{print $1}' > /srv/example.com/config/ftp-password
#  AUTHD_ACCOUNT="example.com" AUTHD_PASSWORD="foo" ./check-ftp-password
#
#

use strict;
use User::pwent;
use File::Path;
use File::stat;
use Sys::Syslog;
use Symbiosis::Domain;


my $VHOST_DIR        = "srv";
my $VHOST_CONFIG_DIR = "config";
my $VHOST_CHROOT_DIR = "public/./";

# These are error codes suitable for dovecot.
my $TEMPORARY_ERROR = 111;
my $PERMANENT_ERROR = 1;

my $ip       = "unknown";
my $service  = "unknown";
my $username = "unknown";
my $password = "unknown";

$ip       = $ENV{ 'AUTHD_REMOTE_IP' } if defined $ENV{ 'AUTHD_REMOTE_IP' };
$service  = "ftp";
$username = $ENV{ 'AUTHD_ACCOUNT' } if defined $ENV{ 'AUTHD_ACCOUNT' };
$password = $ENV{ 'AUTHD_PASSWORD' } if defined $ENV{ 'AUTHD_PASSWORD' };

# Open syslog
openlog( "check-ftp-password", "ndelay,perror", "ftp" );

if ( $username !~ /^(([A-Za-z0-9\-]+\.?)+)$/ )
{
    syslog( 'info', 'Bad username "%s" from %s for %s service',
            $username, $ip, $service );
    print("auth_ok:0\nend\n");
    exit($TEMPORARY_ERROR);
}

#
#  chroot() directory and password file.
#
my $chroot_dir = "/$VHOST_DIR/$username/$VHOST_CHROOT_DIR";
my $pwfile     = "/$VHOST_DIR/$username/$VHOST_CONFIG_DIR/ftp-password";


#
#  Make the directory if it doesn't exist.
#
if ( ( !-d $chroot_dir ) &&
     ( -e $pwfile ) )
{

    # make the directory
    system( "/bin/mkdir", "-p", $chroot_dir . "/htdocs" );

    # make it 0755
    system( "/bin/chmod", "755", $chroot_dir . "/htdocs" );
    system( "/bin/chmod", "755", $chroot_dir );

    my $uid_stat;

    #
    # ugh.  This will blitz areas that www-data might own...
    #
    if ( $uid_stat = stat("/$VHOST_DIR/$username") )
    {
        my $user  = scalar getpwuid( $uid_stat->uid );
        my $group = scalar getgrgid( $uid_stat->gid );

        $user = @$user[0];
        system( "/bin/chown", "-R", $user . ":" . $group, $chroot_dir );
    }
}

#
#  Now use our helper to lookup passwords.
#
my $domain = Symbiosis::Domain->new( path => "/$VHOST_DIR/$username" );


if ( !$domain->loginFTP($password) )
{
    syslog( 'info', 'Bad password for username %s from %s for %s service',
            $username, $ip, $service );
    syslog( 'err', "ftp login failure from IP: $ip username: $username" );
    print("auth_ok:-1\nend\n");
    exit($PERMANENT_ERROR);
}

# The user is the owner of the $chroot_dir
my $user;
my $uid_stat;
if ( ( $uid_stat = stat($chroot_dir) ) )
{
    $user = getpwuid( $uid_stat->uid );

}
else
{

    syslog( 'err', 'Unable to stat %s for username %s from %s for %s service',
            $chroot_dir, $username, $ip, $service );
    syslog( 'err', "ftp login failure from IP: $ip username: $username" );
    print("auth_ok:-1\nend\n");
    exit($PERMANENT_ERROR);
}

print "auth_ok:1\n";
print "uid:" . $user->uid . "\n";
print "gid:" . $user->gid . "\n";
print "dir:$chroot_dir\n";
print "end\n";

# if we've got this far we're OK!
exit(0);
