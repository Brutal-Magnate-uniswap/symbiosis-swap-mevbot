#!/usr/bin/ruby1.8 

require 'symbiosis/monitor/check'

class SshdCheck < Symbiosis::Monitor::Check

  attr_reader :port

  def initialize
    super
    @process.pidfile = "/var/run/sshd.pid"
    @process.initscript = "/etc/init.d/ssh"
    @name = "sshd"
    sshd_config = "/etc/ssh/sshd_config"
    @port = @host = nil

    if ( File.exists?( sshd_config ) )
      # Need to parse for:
      #
      # ListenAddress host|IPv4_addr|IPv6_addr
      # ListenAddress host|IPv4_addr:port
      # ListenAddress [host|IPv6_addr]:port
      # Port port

      File.readlines( sshd_config ).each do |l|
        case l.chomp
          # ListenAddress [host|IPv6_addr]:port
          when /^\s*ListenAddress\s+\[([^\]]+)\]:(\d+)\s*$/i
            if @host.nil? and @port.nil?
              @host = $1 
              @port = $2.to_i
            end
          # ListenAddress host|IPv4_addr:port
          when /^\s*ListenAddress\s+([^:]+):(\d+)\s*$/i
            if @host.nil? and @port.nil?
              @host = $1 
              @port = $2.to_i
            end

          # ListenAddress host|IPv4_addr|IPv6_addr
          when /^\s*ListenAddress\s+([^ ]+)\s*$/i
            @host = $1 if @host.nil?

          # Port port
          when /^\s*Port\s+(\d+)\s*$/i
            @port = $1.to_i if @port.nil?

        end
      end
    end
    #
    # Set some defaults.
    #
    @host ||= "localhost"
    @port ||= 22

  end


  def do_check
    return SystemExit::EX_CONFIG unless initscript_ok?

    r = do_process_check
    self.restart if SystemExit::EX_TEMPFAIL == r
    return r unless 0 == r

    tcpconnection = Symbiosis::Monitor::TCPConnection.new(
      @host, @port, [nil,"SSH-2.0-OpenSSH-5.5p1\n"]
    )
    r = do_tcpconnection_check(tcpconnection)
    self.restart if SystemExit::EX_TEMPFAIL == r

    return r
  end


  def do_response_check(responses)
    raise "Unexpected response '#{responses.first}'" unless responses.first =~ /^SSH/
  end

end

exit SshdCheck.new.do_check if $0 == __FILE__

