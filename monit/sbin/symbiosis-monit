#!/usr/bin/ruby
# = NAME
#
# symbiosis-monit - Symbiosis Service Monitor
#
# = SYNOPSIS
#
# symbiosis-monit [OPTIONS]
#
# = USAGE
#
# -d, --directory <directory>:
#   The directory which contains the scripts to be run.  The default is
#   /etc/symbiosis/monit.d/
#
# -m, --send-mail:
#   If any of the tests fail, send an email containing a pass/fail summary.
#   Use the verbose flag if more detail is required.
#
# -a, --always-mail:
#   Always send the email summary.
#
# -t, --mailto <email>:
#   Set the to address for the email notification.  The default address is
#   root.
#
# -f, --mailfrom <email>:
#   Set the from address for the email notification.  The default address is
#   nobody.
#
# -v, --verbose:
#   Enable verbose output.  This means show or email the entire output all the
#   test scripts produce.  Normally only a pass/fail summary will be shown.
#
# -l, --log-level:
#   Set the log level for logging to syslog.  Available options are the EMERG,
#   ALARM, CRIT, ERR, WARNING, NOTICE, INFO, and DEBUG.  Currently failures are
#   logged with the WARNING level, and other output with the INFO level.
#
# -h, --help:
#   Show help.
#
# -n, --manual:
#   Show the full manual.
#
# = SCRIPTS
#
# Each of the scripts in the script directory are expected to be self
# contained.  That is to say, each script is responsible for testing, and
# starting/stopping/restarting a service as necessary.
#
# A script will be deemed successful if it exits with a status of EX_OK (0).
#
# This program will retry a script once more if it returns with an exit status
# of EX_TEMPFAIL (75).
#
# If a script exits with a status equal to certain pre-defined values, it is
# deemed to be a bad test.  Results of tests returning any of these bad
# statuses are not routinely reported.
#
# Currently the bad test statuses are
#   * EX_USAGE (64) -- command line usage error
#   * EX_CONFIG (78) -- configuration error
#   * 126 / 127     -- 
#
# = LOGGING
#
# Any scripts that fail tests will be logged to the daemon syslog, along with
# the last 10 lines of any output they produce.
#
# = EXIT STATUS
#
# This program will return:
#   0 if none of the tests fail;
#   1 If any of the tests fail;
#  -1 If dpkg is running.
#
# = COPYRIGHT
#
# Copyright Â© 2008 Bytemark Computer Consulting Ltd.  License GPLv2+: GNU GPL
# version 2 or later <http://gnu.org/licenses/gpl.html> This is free software:
# you are free to change and redistribute it.  There is NO WARRANTY, to the
# extent permitted by law.
#
# = AUTHOR
#
# Patrick J Cherry <patrick@bytemark.co.uk>
#
# = DATE
#
# 2008-09-08


require 'getoptlong'
require 'symbiosis/monitor/runner'
require 'systemexit'
require 'log4r'
require 'log4r/outputter/syslogoutputter'
require 'pp'

#
#  Ensure we have a sensible path.
#
ENV['PATH']="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin"

def error(msg)
  STDERR.print "*** Error: #{msg}\n"
  STDERR.print "*** For help, type: #{$0} -h\n"
  exit 1
end

#
#  Defaults.
#
$DEBUG      = ( ENV['DEBUG']   ? 1 : nil )  unless $DEBUG
$VERBOSE    = ( ENV['VERBOSE']   ? 1 : nil )  unless $VERBOSE

# Default mailing addresses
user          = (ENV['USER'].to_s.empty? ? "nobody" : ENV['USER'])
hostname      = Socket.gethostname
mailfrom_addr = user+"@"+hostname
# We only send mail if this is set
mailto_addr   = "root@"+hostname
always_mail   = false
send_mail     = false
dir           = "/etc/symbiosis/monit.d/"
level         = "INFO"
state_db_fn   = "/var/lib/symbiosis/monit.db"
template      = "default"
template_dir  = "/usr/share/symbiosis/monit/"

opts = nil

#
# Options parsing
#
begin
  opts = GetoptLong.new(
                        [ "--verbose",    "-v", GetoptLong::NO_ARGUMENT ],
                        [ "--always-mail","-a", GetoptLong::NO_ARGUMENT ],
                        [ "--send-mail",  "-s", GetoptLong::NO_ARGUMENT ],
                        [ "--help" ,      "-h", GetoptLong::NO_ARGUMENT ],
                        [ "--manual" ,    "-n", GetoptLong::NO_ARGUMENT ],
                        [ "--mailto",     "-m", GetoptLong::REQUIRED_ARGUMENT ],
                        [ "--mailfrom",   "-f", GetoptLong::REQUIRED_ARGUMENT ],
                        [ "--log-level",  "-l", GetoptLong::REQUIRED_ARGUMENT ],
                        [ "--directory",  "-d", GetoptLong::REQUIRED_ARGUMENT ],
                        [ "--template",   "-T", GetoptLong::REQUIRED_ARGUMENT ],
                        [ "--template-directory", "-e", GetoptLong::REQUIRED_ARGUMENT ],
                        [ "--state-db",   "-b", GetoptLong::REQUIRED_ARGUMENT ]
                       )
  opts.quiet = true
  opts.each do |opt, arg|
    case opt
      when "--verbose"
        $VERBOSE=1
      when "--send-mail"
        send_mail = true
      when "--always-mail"
        send_mail   = true
        always_mail = true
      when "--help"
        RDoc::usage('synopsis','usage')
      when "--manual"
        RDoc::usage
      when "--mailto"
        send_mail = true
        mailto_addr = arg
      when "--mailfrom"
        mailfrom_addr = arg
      when "--directory"
        dir = arg
      when "--log-level"
        level = arg.upcase
      when "--state-db"
        state_db_fn = arg
      when "--template"
        template = arg
      when "--template-directory"
        template_dir = arg
    end
  end
rescue GetoptLong::InvalidOption => e
 error e.to_s
end

unless %w(EMERG ALARM CRIT ERR WARNING NOTICE INFO DEBUG).include?(level)
  error "Bad log level #{level}"
end

#
# Open syslog
#
logger = Log4r::Logger.new("Symbiosis::Monitor")
# logger.add Log4r::StdoutOutputter.new("symbiosis-monit")
logger.add Log4r::SyslogOutputter.new("symbiosis-monit")

#
# Bail out if dpkg is running.
#
if 0 == Process.uid
  if Symbiois::Monitor::Check.dpkg_running?
    print "dpkg running -- not conducting tests." if $VERBOSE
    exit 0
  end
end

runner = Symbiosis::Monitor::Runner.new(dir, state_db_fn, template_dir)
runner.go
report = runner.report(template)

if send_mail and (always_mail or runner.should_notify?)
  msg =<<EOF
To: #{mailto_addr}
From: #{mailfrom_addr}
Subject: [symbiosis] Service test report

EOF
  msg += report
  IO.popen("/usr/sbin/sendmail -t","w") do |pipe|
    pipe.print msg
  end
end

puts report if $VERBOSE or $DEBUG

# Return the code
exit (runner.failed_tests.length > 0 ? 1 : 0)

