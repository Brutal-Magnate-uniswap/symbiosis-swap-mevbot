# This transport is used for delivering messages over SMTP connections.

#
# This constant is used to validate DKIM selectors.
#
DKIM_SELECTOR_REGEX = (?i)\N\b[a-z0-9-]+(\.[a-z0-9-]+)*\b\N

remote_smtp_with_dkim:
  debug_print = "T: remote_smtp_with_dkim for $local_part@$domain ($sender_address_domain key)"
  driver = smtp
  #
  # Sign using the $sender_address_domain
  #
  dkim_domain      = $sender_address_domain

  #
  # This reads the dkim selector file in, replaces new lines with colons, and
  # picks the first.  If it is empty, use the $primary_hostname.
  #
  dkim_selector = ${if match{ ${readfile{VHOST_DIR/${sender_address_domain}/VHOST_CONFIG_DIR/dkim}} }\
                       {DKIM_SELECTOR_REGEX}\
                       {$0}\
                       {${if match{$primary_hostname}\
                              {DKIM_SELECTOR_REGEX}\
                              {$0}\
                              {default}\
                       }}\
                  }

  dkim_private_key = ${readfile{VHOST_DIR/${sender_address_domain}/VHOST_CONFIG_DIR/dkim.key}}

  #
  # If dkim_strict is set to true, exim will defer sending the message if
  # signing fails for some reason, otherwise it will send it unsigned.
  #
  # dkim_strict =

  # 
  # The DKIM RFC currently supports two methods: "simple" and "relaxed". The
  # option defaults to "relaxed" when unset.
  #
  # dkim_canon = 
  
  # 
  # When unspecified, the header names recommended in RFC4871 will be used. 
  #
  # dkim_sign_headers =
  #

  # 
  # Use the domain's IP (if it has one) to send outgoing mail.
  #
  interface = <, ${filter{<,${readfile{VHOST_DIR/$sender_address_domain/config/${extract{1}{:}{${filter{ip:ips}{exists{VHOST_DIR/$sender_address_domain/config/$item}}}}}}{,}}}{isip{$item}}}



