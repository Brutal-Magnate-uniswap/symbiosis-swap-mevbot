#!/usr/bin/ruby
#
# symbiosis-check-ftp-password
#
# http://download.pureftpd.org/pub/pure-ftpd/doc/README.Authentication-Modules
#
# Authentication programs can read the following environment variables to get
# info about the user trying to authenticate:
#
# AUTHD_ACCOUNT
# AUTHD_PASSWORD
# AUTHD_LOCAL_IP
# AUTHD_LOCAL_PORT
# TCPREMOTEIP
#
# The program must respond on the standard output with lines like:
#
# auth_ok:1
# uid:42
# gid:21
# dir:/home/j
# end
#
# Note the final 'end' keyword. It's mandatory.
#
# Here's the list of recognized tokens ('xxx' has of course to be filled):
#
# * auth_ok:xxx
# * uid:xxx
# * gid:xxx
# * dir:xxx
# * slow_tilde_expansion:xxx (optional, default is 1)
# * throttling_bandwidth_ul:xxx (optional)
# * throttling_bandwidth_dl:xxx (optional)
# * user_quota_size:xxx (optional)
# * user_quota_files:xxx (optional)
# * ratio_upload:xxx and radio_download:xxx (optional)
# * per_user_max:xxx (optional)
#
#
# To test;
#  mkdir -p /srv/example.com/config
#  echo -n "foo" > /srv/example.com/config/ftp-password
#  AUTHD_ACCOUNT="example.com" AUTHD_PASSWORD="foo" ./check-ftp-password
#
#

require 'symbiosis/domains'
require 'symbiosis/domain/mailbox'
require 'syslog'

# These are error codes suitable for dovecot.  
TEMPORARY_ERROR = 111
PERMANENT_ERROR = 1
SUCCESS         = 0

ip       = "unknown"
service  = "unknown"
username = nil
password = nil
authorized = nil;

ip       = ENV['TCPREMOTEIP' ] if ENV.has_key?('TCPREMOTEIP')
service  = ENV[ 'SERVICE' ]    if ENV.has_key?( 'SERVICE' )
# Used for userdb lookups
authorized = ENV[ 'AUTHORIZED' ]  if ENV.has_key?( 'AUTHORIZED' )

# Open syslog
syslog = Syslog.open( File.basename($0), Syslog::LOG_NDELAY && Syslog::LOG_PERROR, Syslog::LOG_MAIL)

begin
  data = nil

  IO.open(3,"r") do |io|
    data = io.read(512)
  end

  if data.length < 4
    syslog.info "Received bad data during login from #{ip} for #{service} service"
    exit TEMPORARY_ERROR
  end

  username, password, timestamp, rest = data.split( "\0" )

  #
  # username sanity check
  #
  if username.nil? 
    syslog.info "No username given from #{ip} for #{service} service"
    syslog.err  "#{service} login failure from IP: #{ip} username: nil"
  
    exit PERMANENT_ERROR
  end

  mailbox = Symbiosis::Domains.find_mailbox(username)

  if mailbox.nil?
    syslog.info "Non-existent mailbox #{username.inspect} from #{ip} for #{service} service"
    syslog.err  "#{service} login failure from IP: #{ip} username: #{username.inspect}"

    exit PERMANENT_ERROR
  end

  #
  # Try logging in.
  #
  unless authorized or mailbox.login(password.to_s)
    syslog.info "Bad password for username #{username.inspect} from #{ip} for #{ftp} service"
    syslog.err  "#{service} login failure from IP: #{ip} username: #{username.inspect}"

    exit PERMANENT_ERROR
  end

rescue => err

  #
  # Rescue all exceptions, to make sure authentication doesn't happen
  # automatically when things fail
  #
  syslog.err "#{err} for username #{username} from #{ip} for #{service} service"
  exit TEMPORARY_ERROR
end

# 
# If we get this far, we're authorised. 
#

#
# OK at the point we are supposed to do the following:
#
#  * Set user's home directory to $HOME environment. This isn't required, but highly encouraged.
#  * Set $USER environment variable. If the user name was changed (eg. if you lowercased "Username" to "username"), you can tell about it to Dovecot by setting $USER to the changed user name.
#  * Change the process's effective UID and GID to the user's UNIX UID and GID.
#  * Alternatively you could set userdb_uid and userdb_gid environments and add them to EXTRA environment 
#  * Your program received a path to checkpassword-reply binary as the first parameter. Execute it. 
#
# We do not change the effective UID/GID.  We set the userdb_uid/gid instead.
#
dovecot_extras = Hash.new{
  'userdb_user' => username,
  'userdb_home' => mailbox.directory,
  'userdb_uid' =>  mailbox.domain.uid,
  'userdb_gid' =>  mailbox.domain.gid,
  'userdb_mail' => "maildir:#{mailbox.directory}/Maildir",
  'userdb_quota_rule' => "*:bytes=#{mailbox.quota}"
}

ENV[ 'USER' ] = mailbox.username
ENV[ 'HOME' ] = mailbox.directory

#
# Set the extras by adding the keys to the EXTRA variable.
#
ENV[ 'EXTRA' ] = dovecot_extras.keys.join(" ") 

#
# Merge in the envirnonemt
#
dovecot_extras.each do |k,v|
  ENV[k] = v
end

#
# Execute the checkpassword-reply script.
#
exec ARGV if ( ARGV.length > 0 )

#
# OK all done.
#
exit(0)

