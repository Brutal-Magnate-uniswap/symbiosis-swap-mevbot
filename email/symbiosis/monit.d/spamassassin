#!/usr/bin/ruby

require 'symbiosis/monitor/check'

class SpamdCheck < Symbiosis::Monitor::Check

  def initialize
    super pid_file: '/var/run/spamassassin.pid',
          init_script: '/etc/init.d/spamassassin',
          unit_name: 'spamassassin'
  end

  def should_be_running
    (0 < Dir.glob('/srv/*/config/antispam').length)
  end

  #
  # Ignore the test if 
  #   * dpkg if running 
  #   * the initscript is missing and spamassassin should not be running.
  #
  def should_ignore?
    self.class.dpkg_running? or
      (not File.exist?(@process.initscript) and not should_be_running)
  end

  def do_check
    #
    # Check the initscript.  If it is missing, make sure that the process is
    # actually suppose to be running, before raising an error.
    #
    unless initscript_ok?
      if should_be_running
        return SystemExit::EX_CONFIG
      else
        puts "Daemon state probably OK -- initscript is missing and #{@name} supposed to be running."
        return 0
      end
    end

    r = do_process_check 
    if SystemExit::EX_TEMPFAIL == r 
      should_be_running ? self.start : self.stop
    end

    return 0 unless should_be_running

    tcpconnection = Symbiosis::Monitor::TCPConnection.new( 
      "localhost", "spamd", ["PING SPAMC/1.3\r\n",nil]
    )
    r = do_tcpconnection_check(tcpconnection)
    self.restart if SystemExit::EX_TEMPFAIL == r 
    return r
  end

  def do_response_check(responses)
    raise "Unexpected response '#{responses.first}'" unless responses.first =~ /PONG/
  end

end

exit SpamdCheck.new.do_check if $0 == __FILE__

