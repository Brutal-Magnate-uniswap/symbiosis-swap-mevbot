#!/usr/bin/ruby1.8
#
# NAME
#
#   symbiosis-dns-generate - Generate DNS snippet files for Symbiosis domains. 
#
# SYNOPSIS
#
#   --force       Force the re-creation of all SSL sites.
#   --template    Specify an alternative template file to read.
#   --help        Show the help information for this script.
#   --verbose     Show debugging information.
#
# DETAILS
#
# This script is designed to iterate over the domains hosted upon a Symbiosis
# system, and create TinyDNS snippets for each one. 
#
# AUTHOR
#
# Steve Kemp <steve@bytemark.co.uk>
#


require 'getoptlong'


#
#  Entry point to the code
#
$FORCE    = false
$HELP     = false
$VERBOSE  = false

#
#  Do we need to restart apache?
#
$UPLOAD=false

#
# The root directory -- '/' by default.
#
root = "/"
dns_template     = nil 
bytemarkdns_data_dir      = nil

opts = GetoptLong.new(
         [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
         [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ],
         [ '--template', '-t', GetoptLong::REQUIRED_ARGUMENT ],
         [ '--force', '-f', GetoptLong::NO_ARGUMENT ]
       )

opts.each do |opt, arg|
  case opt
  when '--help'
    $HELP = true
  when '--verbose'
    $VERBOSE = true
  when '--template'
    dns_template = arg
  when '--bytemarkdns-data-dir'
    bytemarkdns_data_dir = arg
  when '--root'
    root = arg
  when '--force'
    $FORCE = true
  end
end

#
# CAUTION! Here be quality kode.
#
if $HELP
  # Open the file, stripping the shebang line
  lines = File.open(__FILE__){|fh| fh.readlines}[2..-1]

  lines.each do |line|
    line.chomp!
    break if line.empty?
    puts line[2..-1].to_s
  end

  exit 0
end

def verbose(s)
  puts s if $VERBOSE
end

require 'symbiosis/domains'
require 'symbiosis/domain'
require 'symbiosis/config_files/tinydns'

#
# Set the default paths.
#
dns_template         = File.join(root, "/etc/symbiosis/dns.d/tinydns.template.erb") if dns_template.nil?
bytemarkdns_data_dir = File.join(root, "/root/BytemarkDNS/data") if bytemarkdns_data_dir.nil?

#
# Any arguments on the command line specify which domains to do.
#
domains_to_configure = ARGV
string_to_hash = []

#
#  For each domain.
#
Symbiosis::Domains.each do |domain|

  verbose "Domain: #{domain.name} "

  next unless domains_to_configure.empty? or domains_to_configure.include?(domain.name)

  begin
    output        = File.join(domain.config_dir, "dns", domain.name+".txt")
    output_dir    = File.dirname(output)
    config        = Symbiosis::ConfigFiles::Tinydns.new(output, "#")
    config.domain   = domain
    config.template = dns_template

    if ( $FORCE )
      verbose "\tForcing re-creation of snippet due to --force."

    elsif config.exists?

      if config.changed?
        verbose "\tNot updating snippet, as it has been edited by hand."
        next

      elsif config.outdated?
        verbose "\tRe-creating snippet as it is out of date."

      else
        verbose "\tDomain already present and up-to date."
        next

      end

    else
      verbose "\tConfiguring site for the first time"

    end

    #
    #
    # Check the TinyDNS syntax.. TODO!
    #
    if config.ok?

      verbose "\tWriting snippet to #{output}"

      #
      # Create directory with the same ownership as the parent
      #
      domain.create_dir(output_dir) unless File.exists?(output_dir)
      
      #
      # Write the snippet
      #
      config.write
  
      #
      # Make sure the ownership is correct.
      #
      File.chown(domain.uid, domain.gid, config.filename)

    else
      verbose "\tThe new DNS snippet is invalid -- no changes have been made."
    end
 
    #
    # Copy all the DNS data across to BytemarkDNS/data
    # 
    # FIXME: At this point more checks are needed, to prevent overwriting of
    # another user's DNS data.
    #
    Dir.glob(File.join(output_dir,"*.txt")).each do |file|
      input = File.read(file)

      string_to_hash << file
      string_to_hash << input

      new_filename = File.join(bytemarkdns_data_dir, File.basename(file))

      verbose "\tWriting data to #{new_filename}"
      File.open(new_filename,"w") do |fh|

        fh.puts <<EOF
#
# DO NOT EDIT THIS FILE - CHANGES MAY BE OVERWRITTEN
#
# Edit the source of this file instead:
#
#  #{file}
#
EOF
        fh.print input
      end

    end

    #
    # Rescue errors for this domain, but continue for others.
    #
  rescue StandardError => err
    warn "\tUnable to create DNS data for #{domain.name} because #{err.to_s}"
    verbose "\t"+err.backtrace.join("\n\t")
  end
end

begin

  verbose "All new data have been written.  Checking for changes."

  #
  # Check to see if our new hash is the same as the one we have recorded.
  #
  new_hash = Digest::MD5.new.hexdigest(string_to_hash.join("\n"))

  #
  # This is where we expect to find the current hash.
  #
  hash_file = File.expand_path(File.join(bytemarkdns_data_dir,"../.hash"))

  if File.exists?(hash_file)
    old_hash = File.readlines(hash_file).first.to_s.chomp
  else
    old_hash = nil
  end

  #
  # Set our upload flag if there is no old hash, or the new hash doesn't match
  # the old one.
  #
  $UPLOAD = ( old_hash.nil? or new_hash != old_hash )

  if $UPLOAD
    upload_script = File.expand_path(File.join(bytemarkdns_data_dir,"../upload"))

    verbose "Uploading using #{upload_script}"


    #
    # Change directory before uploading.
    #
    FileUtils.chdir(File.dirname(upload_script))

    #
    # Run the upload script -- this will raise an appropriate error if the
    # script doesn't exist or fails.
    #
    IO.popen("/bin/bash #{upload_script} 2>&1","r") do |io|
      while !io.eof? do
        verbose io.readline
      end
    end

    verbose "Writing hash to #{hash_file}"
    #
    # Finally record the new hash
    #
    File.open(hash_file, "w"){|fh| fh.puts new_hash }
  else
    verbose "No need to upload as no changes in the data have been detected."
  end
rescue StandardError => err
  warn "Unable to upload DNS data because #{err.to_s}"
  verbose "\t"+err.backtrace.join("\n\t")
  exit 1
end

#
#  All done.
#
  
exit 0

