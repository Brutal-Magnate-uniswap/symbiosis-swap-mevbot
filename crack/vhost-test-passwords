#!/usr/bin/perl -w

=head1 NAME

vhost-test-passwords - Test virtual hosting passwords for strength

=head1 SYNOPSIS

  vhost-test-passwords [options]

  Help Options:
   --help     Show help information.
   --manual   Read the manual for this script.

  Misc Options:
   --verbose  Be verbose.

=cut


=head1 OPTIONS

=over 8

=item B<--help>
Show a brief overview of this script.

=item B<--manual>
Show the manual.

=item B<--verbose>
Be verbose in execution.

=back

=cut


=head1 DESCRIPTION

 This script is designed to test the strength of all user-created
 passwords upon a machine running the Bytemark Vhosting packages.

 The testing of passwords works for

=over 8

=item FTP passwords

=item IMAP/mail passwords

=back


  Actually system login passwords cannot be tested as they are not
 available in plaintext.

=cut


=head1 USAGE

  Basic usage is as simple as:

=for example begin

   vhost-test-passwords [--verbose]

=for example end

=cut


use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;


#
#  Prefix
#
my %CONFIG;
$CONFIG{'PREFIX'} = "/srv/";


#
#  Parse arguments, if any
#
parseCommandLineArguments();



#
#  Test FTP passwords
#
foreach my $file ( sort( glob( "/srv/*/config/ftp-password" ) ) )
{
    $CONFIG{'verbose'} && print "Testing file: $file\n" ;

    testPasswordFile( $file );
}

#
#  Test mailbox passwords
#
foreach my $file ( sort( glob( "/srv/*/mailboxes/*/password" ) ) )
{
    $CONFIG{'verbose'} && print "Testing file: $file\n" ;

    testPasswordFile( $file );
}



=begin doc

  Output to the console any weak passwords in use.

=end doc

=cut

sub testPasswordFile
{
    my( $file ) = (@_);

    if ( ! -e $file )
    {
        die "testPassword($file) - File doesn't exist\n";
    }

    #
    #  Read the password
    #
    open( FILE, "<", $file )
      or die "Failed to read password from $file: $!";
    my $passwd = <FILE>;
    close( FILE );

    chomp( $passwd );

    #
    #  Test the password
    #
    system( "/usr/sbin/passwd-test '$passwd' >/dev/null 2>/dev/null" );

    my $ret = $? >> 8;
    if ( $ret )
    {
        print "The file $file contains a weak password '$passwd'\n";
    }
    else
    {
        $CONFIG{'verbose'} && print "\tPassword is OK\n";
    }
}




=begin doc

  Parse our command line arguments.

=end doc

=cut

sub parseCommandLineArguments
{
    my $HELP    = 0;
    my $MANUAL  = 0;

    #
    #  Parse options.
    #
    GetOptions(
        # Help options
        "help",    \$HELP,
        "manual",  \$MANUAL,
        "verbose", \$CONFIG{ 'verbose' },

    );

    pod2usage(1) if $HELP;
    pod2usage( -verbose => 2 ) if $MANUAL;
}
