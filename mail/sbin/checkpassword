#!/usr/bin/perl -w

# checkpassword.pl
# 
# http://cr.yp.to/checkpwd/interface.html
# http://wiki.dovecot.org/PasswordDatabase/CheckPassword
# 
# To test;
#  echo -e -n "admin@skxtrial.vm.bytemark.co.uk\0a very secret password\0abc\0andtherest" | ./checkpassword 3<&0 ; echo $?
#
#

use strict;
use User::pwent;
use File::stat;
use Sys::Syslog;

my $VHOST_DIR="srv";
my $VHOST_MAILBOX_DIR="mailboxes";

# These are error codes suitable for dovecot.
my $TEMPORARY_ERROR = 111;
my $PERMANENT_ERROR = 1;

#Dovecot also sets some environment variables that the script may use:
#
# * SERVICE: contains eg. imap, pop3 or smtp
# * TCPLOCALIP and TCPREMOTEIP: Client socket's IP addresses if available
# * MASTER_USER: If master login is attempted. This means that the password
#   contains the master user's password and the normal username contains the
#   user who master wants to log in as. 

my $ip      = "unknown ip";
my $service = "unknown";
$ip      = $ENV{'TCPREMOTEIP'} if defined $ENV{'TCPREMOTEIP'};
$service = $ENV{'SERVICE'}     if defined $ENV{'SERVICE'};

my($length, $buffer);

# Open syslog
openlog("checkpassword","ndelay,perror","mail");

# Read from file descriptor 3
if( open (FD, "<&=3")) {
  $length = read(FD, $buffer, 512);
  close FD;

} else {
  syslog('err', 
         'Failed to open descriptor 3 to read during login from %s for %s service',
         $ip, $service);

  exit ($TEMPORARY_ERROR);
}

if ($length < 4) {
  syslog('err', 'Received bad data!');

  exit($TEMPORARY_ERROR);
}

my($username, $password, $timestamp, $rest) = split(/\0/,$buffer);

my ($local_part, $domain);

if ($username =~ /^(([a-z0-9_\-]+\.?)+)@(([a-z0-9\-]+\.?)+)$/) {
  $local_part = $1;
  $domain = $3;

} else {
  syslog('err', 
         'Bad username "%s" from %s for %s service', 
   $username, $ip, $service);
 
  exit($PERMANENT_ERROR);
}

my $local_part_dir = "/$VHOST_DIR/$domain/$VHOST_MAILBOX_DIR/$local_part";
my $pwfile = "$local_part_dir/password";
my $real_password;

# Read the password file
if(open(PWFILE,$pwfile)) {
  $real_password = <PWFILE>;
  close(PWFILE);

} else {
  syslog('err', 
         'Unable to open file %s for username %s from %s for %s service', 
         $pwfile, $username, $ip, $service);

  exit($PERMANENT_ERROR);
}

# Make sure we have a real_password set, and chomp it if we do.
if ( $real_password ) {
  chomp $real_password;
} else {
  syslog('err', 
         'Empty/non-existent password set for username %s from %s for %s service', 
         $username, $ip, $service);
  
  exit($PERMANENT_ERROR);
}

# Make sure we have a password set
if ( not $password ) {
  syslog('err', 
         'Bad password for username %s from %s for %s service', 
         $username, $ip, $service);
  
  exit($PERMANENT_ERROR);
}

# Check the password, crypt first, plaintext second.
if ( not ($real_password =~ /^({CRYPT})?((\$1\$)?.*)$/i and $2 and $2 ne "" and crypt($password,$2) eq $2) and
     not ($real_password ne "" and $password eq $real_password) ) {
  syslog('err', 
         'Bad password for username %s from %s for %s service', 
         $username, $ip, $service);
  
  exit($PERMANENT_ERROR);
}

# The user is the owner of the $local_part_dir
my $user;
my $uid_stat;
if(($uid_stat = stat($local_part_dir))) {
  $user = getpwuid($uid_stat->uid);

} else {
  syslog('err', 
         'Unable to stat %s for username %s from %s for %s service',
         $local_part_dir, $username, $ip, $service);
  
  exit($TEMPORARY_ERROR);
}

# Write back out to FD 4 for dovecot to pick things up
if(open (FD, ">>&=4")) {
  printf(FD "userdb_user=%s\tuserdb_home=%s\tuserdb_uid=%s\tuserdb_gid=%s\tuserdb_mail=%s\t",
            $user->name, $local_part_dir, $user->uid, $user->gid, "maildir:$local_part_dir/Maildir");
  close FD;

} else {
  syslog('err', 
         'Failed to open descriptor 4 during login for %s from %s for %s service', 
         $username, $ip, $service);

  exit($TEMPORARY_ERROR); 
}

# if we've got this far we're OK!
exit(0);
