#!/usr/bin/perl -w


=head1 NAME

dovecot_checkpassword -- Password checking script for dovecot

=cut

=head1 DESCRIPTION

This script is used in checking passwords using the checkpwd interface
developed for qmail against the values set for users of the Bytemark Symbiosis
system.

=cut

=head1 OPTIONS

   --help        Show the help information for this script.
   --manual      Read the manual for this script.

=cut

=head1 USAGE

This script reads a username, terminated by NULL, followed by a password
terminated by NULL from file descriptor 3.  It then checks the result against
the value in /srv/domain/mailboxes/localpart/password.  The result of this
comparison is then returned as an exit status.

The password file can plain text or use any hash supported by crypt(3).

On successful completion, this program returns details about the user's UID,
GUID, home directory, and mailbox based on the ownership of the directory
containing the user's mailbox. 

=cut

=head1 EXAMPLES
 
To test the interface, use the following command

 echo -e -n "test@example.com\0a very secret password\0" | dovecot_checkpassword 3<&0 ; echo $?

where "test@example.com" is the username and "a very secret password" is the
password.  The exit status determines the result of the lookup.

=cut

=head1 EXIT STATUS

This script returns 0 for success, 1 for permanent failure, and 111 for
temporary failure. 

=cut

=head1 SEE ALSO

dovecot(1), http://cr.yp.to/checkpwd/interface.html, http://wiki.dovecot.org/PasswordDatabase/CheckPassword

=cut

=head1 AUTHOR

Patrick J Cherry <patrick@bytemark.co.uk>

=cut
#

use strict;
use User::pwent;
use File::stat;
use Sys::Syslog;
use Getopt::Long;
use Pod::Usage;


my $HELP   = 0;
my $MANUAL = 0;
#  Parse options.
#
if (
   !GetOptions( 
    "help",          \$HELP,
    "manual",        \$MANUAL
    ) )
{
  exit;
}

pod2usage(1) if $HELP;
pod2usage( -verbose => 2 ) if $MANUAL;


my $VHOST_DIR="srv";
my $VHOST_MAILBOX_DIR="mailboxes";

# These are error codes suitable for dovecot.
my $TEMPORARY_ERROR = 111;
my $PERMANENT_ERROR = 1;

#Dovecot also sets some environment variables that the script may use:
#
# * SERVICE: contains eg. imap, pop3 or smtp
# * TCPLOCALIP and TCPREMOTEIP: Client socket's IP addresses if available
# * MASTER_USER: If master login is attempted. This means that the password
#   contains the master user's password and the normal username contains the
#   user who master wants to log in as. 

my $ip      = "unknown ip";
my $service = "unknown";
$ip      = $ENV{'TCPREMOTEIP'} if defined $ENV{'TCPREMOTEIP'};
$service = $ENV{'SERVICE'}     if defined $ENV{'SERVICE'};

my($length, $buffer);

# Open syslog
openlog("dovecot_checkpassword","ndelay,perror","mail");

# Read from file descriptor 3
if( open (FD, "<&=3")) {
  $length = read(FD, $buffer, 512);
  close FD;

} else {
  syslog('err', 
         'Failed to open descriptor 3 to read during login from %s for %s service',
         $ip, $service);

  exit ($TEMPORARY_ERROR);
}

if ($length < 4) {
  syslog('err', 'Received bad data!');

  exit($TEMPORARY_ERROR);
}

my($username, $password, $timestamp, $rest) = split(/\0/,$buffer);

my ($local_part, $domain);

if ($username =~ /^(([a-z0-9_\-]+\.?)+)@(([a-z0-9\-]+\.?)+)$/) {
  $local_part = $1;
  $domain = $3;

} else {
  syslog('err', 
         'Bad username "%s" from %s for %s service', 
   $username, $ip, $service);
 
  exit($PERMANENT_ERROR);
}

my $local_part_dir = "/$VHOST_DIR/$domain/$VHOST_MAILBOX_DIR/$local_part";
my $pwfile = "$local_part_dir/password";
my $real_password;

# Read the password file
if(open(PWFILE,$pwfile)) {
  $real_password = <PWFILE>;
  close(PWFILE);

} else {
  syslog('err', 
         'Unable to open file %s for username %s from %s for %s service', 
         $pwfile, $username, $ip, $service);

  exit($PERMANENT_ERROR);
}

# Make sure we have a real_password set, and chomp it if we do.
if ( $real_password ) {
  chomp $real_password;
} else {
  syslog('err', 
         'Empty/non-existent password set for username %s from %s for %s service', 
         $username, $ip, $service);
  
  exit($PERMANENT_ERROR);
}

# Make sure we have a password set
if ( not $password ) {
  syslog('err', 
         'Bad password for username %s from %s for %s service', 
         $username, $ip, $service);
  
  exit($PERMANENT_ERROR);
}

# Check the password, crypt first, plaintext second.
if ( not ($real_password =~ /^({CRYPT})?((\$1\$)?.*)$/i and $2 and $2 ne "" and crypt($password,$2) eq $2) and
     not ($real_password ne "" and $password eq $real_password) ) {
  syslog('err', 
         'Bad password for username %s from %s for %s service', 
         $username, $ip, $service);
  
  exit($PERMANENT_ERROR);
}

# The user is the owner of the $local_part_dir
my $user;
my $uid_stat;
if(($uid_stat = stat($local_part_dir))) {
  $user = getpwuid($uid_stat->uid);

} else {
  syslog('err', 
         'Unable to stat %s for username %s from %s for %s service',
         $local_part_dir, $username, $ip, $service);
  
  exit($TEMPORARY_ERROR);
}

# Write back out to FD 4 for dovecot to pick things up
if(open (FD, ">>&=4")) {
  printf(FD "userdb_user=%s\tuserdb_home=%s\tuserdb_uid=%s\tuserdb_gid=%s\tuserdb_mail=%s\t",
            $user->name, $local_part_dir, $user->uid, $user->gid, "maildir:$local_part_dir/Maildir");
  close FD;

} else {
  syslog('err', 
         'Failed to open descriptor 4 during login for %s from %s for %s service', 
         $username, $ip, $service);

  exit($TEMPORARY_ERROR); 
}

# if we've got this far we're OK!
exit(0);
